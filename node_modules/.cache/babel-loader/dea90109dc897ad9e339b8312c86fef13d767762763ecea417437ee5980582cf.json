{"ast":null,"code":"var _jsxFileName = \"F:\\\\SC Docs\\\\React Projects\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\n//import TextForm from './components/TextForm';\n//import Alert from './components/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState({\n    color: 'dark',\n    bgColor: 'dark'\n  }); //Whether dark mode is enabled or not.\n\n  //const [alert, setAlert] = useState(null);\n\n  // const showAlert = (message, type) => {\n  //   setAlert({\n  //     message: message,\n  //     type: type\n  //   });\n  //   setTimeout(() => {\n  //     setAlert(null);\n  //     }, 2000);\n  // }\n\n  const toggleMode = theme => {\n    console.log(theme);\n    if (theme === 'dark') {\n      setMode({\n        color: 'dark',\n        bgColor: 'dark'\n      });\n      document.body.style.backgroundColor = '#162024';\n      document.body.style.color = 'white';\n      //showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    if (theme === 'primary') {\n      setMode({\n        color: 'dark',\n        bgColor: 'primary'\n      });\n      document.body.style.backgroundColor = '#3388FF';\n      document.body.style.color = 'white';\n      //showAlert(\"Primary mode has been enabled\", \"success\");\n    } else {\n      setMode({\n        color: 'light',\n        bgColor: 'light'\n      });\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      //showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"Textutils\",\n      mode: mode,\n      toggleMode: toggleMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"vGYFerXYJLH5vx/4mWTguG078Do=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","color","bgColor","toggleMode","theme","console","log","document","body","style","backgroundColor","children","title","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["F:/SC Docs/React Projects/my-app/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\n//import TextForm from './components/TextForm';\n//import Alert from './components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState({\n    color: 'dark',\n    bgColor: 'dark'\n  }); //Whether dark mode is enabled or not.\n\n  //const [alert, setAlert] = useState(null);\n\n  // const showAlert = (message, type) => {\n  //   setAlert({\n  //     message: message,\n  //     type: type\n  //   });\n  //   setTimeout(() => {\n  //     setAlert(null);\n  //     }, 2000);\n  // }\n\n  const toggleMode = (theme) => {\n    console.log(theme);\n    if (theme === 'dark') {\n        setMode({color: 'dark', bgColor: 'dark'});\n        document.body.style.backgroundColor = '#162024';\n        document.body.style.color = 'white';\n        //showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    if (theme === 'primary') {\n      setMode({color: 'dark', bgColor: 'primary'});\n      document.body.style.backgroundColor = '#3388FF';\n      document.body.style.color = 'white';\n      //showAlert(\"Primary mode has been enabled\", \"success\");\n    }\n    else{\n      setMode({color: 'light', bgColor: 'light'});\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      //showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n\n  return (\n    <>\n      <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode}/>\n      {/* <Alert alert={alert}/> */}\n      <div className='container my-3'>\n        {/* <TextForm heading=\"Enter the text to analyze below\" mode={mode} showAlert={showAlert}/> */}\n        {/* <About/> */}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAClB;AACA,OAAOC,MAAM,MAAM,qBAAqB;AACxC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC;IAC/BU,KAAK,EAAE,MAAM;IACbC,OAAO,EAAE;EACX,CAAC,CAAC,CAAC,CAAC;;EAEJ;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,UAAU,GAAIC,KAAK,IAAK;IAC5BC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,IAAIA,KAAK,KAAK,MAAM,EAAE;MAClBJ,OAAO,CAAC;QAACC,KAAK,EAAE,MAAM;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;MACzCK,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,SAAS;MAC/CH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACR,KAAK,GAAG,OAAO;MACnC;IACJ;IACA,IAAIG,KAAK,KAAK,SAAS,EAAE;MACvBJ,OAAO,CAAC;QAACC,KAAK,EAAE,MAAM;QAAEC,OAAO,EAAE;MAAS,CAAC,CAAC;MAC5CK,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,SAAS;MAC/CH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACR,KAAK,GAAG,OAAO;MACnC;IACF,CAAC,MACG;MACFD,OAAO,CAAC;QAACC,KAAK,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAO,CAAC,CAAC;MAC3CK,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAG,OAAO;MAC7CH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACR,KAAK,GAAG,OAAO;MACnC;IACF;EACF,CAAC;EAED,oBACEP,OAAA,CAAAE,SAAA;IAAAe,QAAA,gBACEjB,OAAA,CAACF,MAAM;MAACoB,KAAK,EAAC,WAAW;MAACb,IAAI,EAAEA,IAAK;MAACI,UAAU,EAAEA;IAAW;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAE/DtB,OAAA;MAAKuB,SAAS,EAAC;IAAgB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAG1B,CAAC;EAAA,eACN,CAAC;AAEP;AAAClB,EAAA,CAlDQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAoDZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}